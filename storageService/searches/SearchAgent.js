'use strict';
var SharedUtils = require('../../sharedUtils/utils');
var Elasticsearch = require('elasticsearch');

var Configs = require('../../configs/config');

var Client = new Elasticsearch.Client({
    host: Configs.get().db.searchEnv.host,
});

/**
 * the default index is the db name
 */
var DEFAULT_INDEX = Configs.get().db.searchEnv.defaultIndex;

/**
 * Public API
 * @Author: George_Chen
 * @Description: to peform a search on elasticsearch server
 *         NOTE: because our index is generated by mongo-connector
 *               ,as a result, the mongodb collection become the index type
 *
 * @param {String}      collection, the target collection
 * @param {Object}      queryExpression, elasticsearch query expression
 */
exports.singleSearchAsync = function(collection, queryExpression) {
    return Client.search({
        index: DEFAULT_INDEX,
        type: collection,
        body: queryExpression
    }).then(function(result) {
        return result.hits.hits;
    }).catch(function(err) {
        SharedUtils.printError('agent.js', 'singleSearchAsync', err);
        throw err;
    });
};

/**
 * Public API
 * @Author: George_Chen
 * @Description: to peform a multi-search on elasticsearch server
 *         NOTE: the msearch query format is different from single search,
 *               detail refer to the elasticsearch official site
 *
 * @param {Array}      queryExpressions, an array of query expressions
 */
exports.multiSearchAsync = function(queryExpressions) {
    var msearchQuery = {
        body: []
    };
    SharedUtils.fastArrayMap(queryExpressions, function(obj) {
        // push current search header
        msearchQuery.body.push({
            index: DEFAULT_INDEX,
            type: obj.collection
        });
        // push current search body
        msearchQuery.body.push(obj.query);
    });
    return Client.msearch(msearchQuery)
        .then(function(result) {
            return result.responses;
        }).catch(function(err) {
            SharedUtils.printError('agent.js', 'multiSearchAsync', err);
            throw err;
        });
};

/**
 * Public API
 * @Author: George_Chen
 * @Description: to peform data index on elasticsearch server
 * 
 * @param {Object}      expression, the index expression
 */
exports.indexAsync = function(expression) {
    return Client.index(expression)
        .catch(function(err) {
            SharedUtils.printError('agent.js', 'indexAsync', err);
            throw err;
        });
};
